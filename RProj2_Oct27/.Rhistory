library(BiocManager)
library(phyloseq)
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_unrare.RData")
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_unrare.RData")
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_unrare.RData")
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_unrare.RData")
View(mpt_final)
unrare <- load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_unrare.RData")
rare <- load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_unrare.RData")
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_unrare.RData")
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_rare.RData")
View(mpt_rare)
View(mpt_final)
mpt_final@sam_data
mpt_rare@sam_data
help write.csv()
help write.csv
help write
metadata <- mpt_final@sam_data
View(metadata)
typeof(metadata)
#load the files from the other group, they are mpt_rare and final
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_unrare.RData")
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_rare.RData")
#mpt_final has more samples corresponding to the metadata so we'll be extracting those
metadata_old <- mpt_final@sam_data
typeof(metadata) #outputed list
typeof(metadata_old) #outputed list
#load the files from the other group, they are mpt_rare and final
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_unrare.RData")
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_rare.RData")
#mpt_final has more samples corresponding to the metadata so we'll be extracting those
metadata_other <- mpt_final@sam_data
typeof(metadata_other) #outputed list
library(readr)
depression_metadata <- read_csv("depression_metadata.csv")
View(depression_metadata)
View(metadata_other)
metadata <- do.call(rbind.data.frame, metadata_other)
view(metadata)
View(metadata)
#turned the columns into rows ;-;
#metadata <- do.call(rbind.data.frame, metadata_other)
metadata <- data.frame(matrix(unlist(metadata_other), nrow=length(metadata_other), byrow=TRUE))
#turned the columns into rows ;-;
#metadata <- do.call(rbind.data.frame, metadata_other)
metadata <- data.frame(matrix(unlist(metadata_other), nrow=length(metadata_other), byrow=FALSE))
View(metadata)
#turned the columns into rows ;-;
#metadata <- do.call(rbind.data.frame, metadata_other)
metadata <- data.frame(matrix(unlist(metadata_other), nrow=length(metadata_other), byrow=TRUE))
View(metadata)
#turned the columns into rows ;-;
#metadata <- do.call(rbind.data.frame, metadata_other)
metadata <- data.frame(matrix(unlist(metadata_other), byrow=FALSE))
View(metadata)
metadata_other$experiment_name
length(metadata_other$experiment_name)
#turned the columns into rows ;-;
#metadata <- do.call(rbind.data.frame, metadata_other)
metadata <- data.frame(matrix(unlist(metadata_other), nrow=length(metadata_other$experiment_name), byrow=FALSE))
View(metadata)
#turned the columns into rows ;-;
#metadata <- do.call(rbind.data.frame, metadata_other)
metadata <- data.frame(matrix(unlist(metadata_other),
nrow=length(metadata_other$experiment_name),
byrow=FALSE,
stringsAsFactors=FALSE))
#turned the columns into rows ;-;
#metadata <- do.call(rbind.data.frame, metadata_other)
metadata <- data.frame(matrix(unlist(metadata_other),
nrow=length(metadata_other$experiment_name),
byrow=FALSE,),
stringsAsFactors=FALSE)
names(metadata) <- names(unlist(metadata_other[1]))
row.names(metadata_other)
row.names(metadata) <- row.names(metadata_other)
library(dplyr)
#classify ppl into depressed or not based on BDI scale
#since score of >=21 is moderate depression or more, cut off there
metadata_dep_cat <- metadata %>%
mutate(dep_cat = case_when(
bdi_ii < 21 ~ "not depressed",
bdi_ii >= 21 ~ "depressed"
))
View(metadata_dep_cat)
help(select())
help("select")
select(metadata_dep_cat, all_of("bdi_ii", "dep_cat"))
select(metadata_dep_cat, `bdi_ii`, `dep_cat`)
is.na("hi?")
is.na()
is.na(na)
#a lot of columns lack any data on depression catagory, so those are removed
filter(test_1, is.na('dep_cat'))
#checking to make sure all columns make sense
test_1 <- select(metadata_dep_cat, `bdi_ii`, `dep_cat`)
#a lot of columns lack any data on depression catagory, so those are removed
filter(test_1, is.na('dep_cat'))
View(test_1)
#a lot of columns lack any data on depression catagory, so those are removed
test_1 <- filter(test_1, !is.na('dep_cat'))
#checking to make sure all columns make sense
test_1 <- select(metadata_dep_cat, `bdi_ii`, `dep_cat`)
#a lot of columns lack any data on depression category, so those are removed
test_1 <- filter(test_1, !is.na('dep_cat'))
#checking to make sure all columns make sense
test_1 <- select(metadata_dep_cat, `bdi_ii`, `dep_cat`)
#a lot of columns lack any data on depression category, so those are removed
test_1 <- filter(test_1, !is.na('dep_cat'))
#a lot of columns lack any data on depression category, so those are removed
test_1 <- filter(test_1, is.na('dep_cat'))
#checking to make sure all columns make sense
test_1 <- select(metadata_dep_cat, `bdi_ii`, `dep_cat`)
#checking to make sure all columns make sense
test_1 <- select(metadata_dep_cat, `bdi_ii`, `dep_cat`)
#a lot of columns lack any data on depression category, so those are removed
test_1 <- filter(test_1, is.na(dep_cat))
#checking to make sure all columns make sense
test_1 <- select(metadata_dep_cat, `bdi_ii`, `dep_cat`)
#a lot of columns lack any data on depression category, so those are removed
test_1 <- filter(test_1, is.na(dep_cat))
#a lot of columns lack any data on depression category, so those are removed
test_1 <- filter(test_1, !is.na(dep_cat)) #213 are empty
#checking to make sure all columns make sense
test_1 <- select(metadata_dep_cat, `bdi_ii`, `dep_cat`)
#a lot of columns lack any data on depression category, so those are removed
test_1 <- filter(test_1, !is.na(dep_cat)) #213 are empty
#a lot of columns lack any data on depression category, so those are removed
metadata_filtered_1 <- filter(metadata_dep_cat, !is.na(dep_cat)) #213 are empty
View(metadata_filtered_1)
metadata_HIV_pos <- filter(metadata_filtered, hiv_status_clean == "HIV+")
#a lot of columns lack any data on depression category, so those are removed
metadata_filtered <- filter(metadata_dep_cat, !is.na(dep_cat)) #213 are empty, 617 left
metadata_HIV_pos <- filter(metadata_filtered, hiv_status_clean == "HIV+")
View(metadata_HIV_pos)
metadata_HIV_neg <- filter(metadata_filtered, hiv_status_clean == "HIV-")
View(metadata_HIV_neg)
#load the packages needed to open the files
library(BiocManager)
library(phyloseq)
library(dplyr)
#load the files from the other group, they are mpt_rare and final
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_unrare.RData")
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_rare.RData")
#mpt_final has more samples corresponding to the metadata so we'll be extracting those
metadata_other <- mpt_final@sam_data
typeof(metadata_other) #outputted list
#change the type from list to dataframe for adjustments
metadata <- data.frame(matrix(unlist(metadata_other),
nrow=length(metadata_other$experiment_name),
byrow=FALSE,),
stringsAsFactors=FALSE)
#changing column names to match the old one
names(metadata) <- names(unlist(metadata_other[1]))
row.names(metadata) <- row.names(metadata_other)
#classify ppl into depressed or not based on BDI scale
#since score of >=21 is moderate depression or more, cut off there
metadata_dep_cat <- metadata %>%
mutate(dep_cat = case_when(
bdi_ii < 21 ~ "not depressed",
bdi_ii >= 21 ~ "depressed"
))
#checking to make sure all columns make sense
select(metadata_dep_cat, `bdi_ii`, `dep_cat`)
#a lot of columns lack any data on depression category, so those are removed
metadata_filtered <- filter(metadata_dep_cat, !is.na(dep_cat)) #213 are empty, 617 left
#ok for the two groups, one with and one without HIV
metadata_HIV_pos <- filter(metadata_filtered, hiv_status_clean == "HIV+") #444 samples left
metadata_HIV_neg <- filter(metadata_filtered, hiv_status_clean == "HIV-") #172 samples left
View(metadata_HIV_pos)
View(metadata_HIV_neg)
#and save metadata_filtered for now as RData
save(metadata_filtered, 'metadata_filt.RData')
#and save metadata_filtered for now as RData
save(metadata_filtered, 'metadata_filtered.RData')
#and save metadata_filtered for now as RData
save(metadata_filtered, file = 'metadata_filt.RData')
#load the packages needed to open the files
library(BiocManager)
library(phyloseq)
library(dplyr)
#load the files from the other group, they are mpt_rare and final
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_unrare.RData")
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_rare.RData")
#mpt_final has more samples corresponding to the metadata so we'll be extracting those
metadata_other <- mpt_final@sam_data
typeof(metadata_other) #outputted list
#change the type from list to dataframe for adjustments
metadata <- data.frame(matrix(unlist(metadata_other),
nrow=length(metadata_other$experiment_name),
byrow=FALSE,),
stringsAsFactors=FALSE)
#changing column names to match the old one
names(metadata) <- names(unlist(metadata_other[1]))
row.names(metadata) <- row.names(metadata_other)
#classify ppl into depressed or not based on BDI scale
#since score of >=21 is moderate depression or more, cut off there
metadata_dep_cat <- metadata %>%
mutate(dep_cat = case_when(
bdi_ii < 20 ~ "not depressed",
bdi_ii >= 20 ~ "depressed"
))
#checking to make sure all columns make sense
select(metadata_dep_cat, `bdi_ii`, `dep_cat`)
#a lot of columns lack any data on depression category, so those are removed
metadata_filtered <- filter(metadata_dep_cat, !is.na(dep_cat)) #213 are empty, 617 left
#ok for the two groups, one with and one without HIV
metadata_HIV_pos <- filter(metadata_filtered, hiv_status_clean == "HIV+") #444 samples left
metadata_HIV_neg <- filter(metadata_filtered, hiv_status_clean == "HIV-") #172 samples left
#clear for all virus
meta_novir <- filter(metadata_HIV_neg, hcv == "NO")
View(meta_novir)
#for the old file?? not really needed
#load the new file, used code from manual load
library(readr)
depression_metadata <- read_csv("depression_metadata.csv")
View(depression_metadata)
#merge the meta_novir with the depression metadata
meta_joined <- left_join(meta_novir, depression_metadata)
View(meta_joined)
#merge the meta_novir with the depression metadata
meta_joined <- left_join(meta_novir, depression_metadata, keep = FALSE)
#merge the meta_novir with the depression metadata
meta_joined <- left_join(meta_novir, depression_metadata, keep = FALSE, relationship = 'one-to-one')
#merge the meta_novir with the depression metadata
library(tibble)
rownames_to_column(meta_novir)
# change it so rownames are column used for join
meta_novir <- rownames_to_column(meta_novir)
depression_metadata <- rownames_to_column(depression_metadata)
View(depression_metadata)
View(meta_novir)
#load the new file, used code from manual load
library(readr)
depression_metadata <- read_csv("depression_metadata.csv")
#merge the meta_novir with the depression metadata
meta_joined <- left_join(meta_novir, depression_metadata, by = join_by(rownames == sample-id))
#merge the meta_novir with the depression metadata
meta_joined <- left_join(meta_novir, depression_metadata, by = join_by(`rownames` == `sample-id`))
#merge the meta_novir with the depression metadata
meta_joined <- left_join(meta_novir, depression_metadata, by = join_by(`rowname` == `sample-id`))
row.names(meta_joined)
names(meta_joined)
#save
save(meta_joined, file = "metadata_join.RData")
View(meta_joined)
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/metadata_join.RData")
View(meta_joined)
#load the packages needed to open the files
library(BiocManager)
library(phyloseq)
library(dplyr)
#load the files from the other group, they are mpt_rare and final
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_unrare.RData")
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_rare.RData")
#mpt_final has more samples corresponding to the metadata so we'll be extracting those
metadata_other <- mpt_final@sam_data
typeof(metadata_other) #outputted list
#change the type from list to dataframe for adjustments
metadata <- data.frame(matrix(unlist(metadata_other),
nrow=length(metadata_other$experiment_name),
byrow=FALSE,),
stringsAsFactors=FALSE)
#changing column names to match the old one
names(metadata) <- names(unlist(metadata_other[1]))
row.names(metadata) <- row.names(metadata_other)
#classify ppl into depressed or not based on BDI scale
#since score of >=21 is moderate depression or more, cut off there
metadata_dep_cat <- metadata %>%
mutate(dep_cat = case_when(
bdi_ii < 20 ~ "not depressed",
bdi_ii >= 20 ~ "depressed"
))
#checking to make sure all columns make sense
select(metadata_dep_cat, `bdi_ii`, `dep_cat`)
#a lot of columns lack any data on depression category, so those are removed
metadata_filtered <- filter(metadata_dep_cat, !is.na(dep_cat)) #213 are empty, 617 left
#ok for the two groups, one with and one without HIV
metadata_HIV_pos <- filter(metadata_filtered, hiv_status_clean == "HIV+") #444 samples left
metadata_HIV_neg <- filter(metadata_filtered, hiv_status_clean == "HIV-") #172 samples left
#clear for all virus
meta_novir <- filter(metadata_HIV_neg, hcv == "NO")
#and save metadata_filtered for now as RData
save(metadata_filtered, file = 'metadata_filt.RData')
#load the new file, used code from manual load
library(readr)
depression_metadata <- read_csv("depression_metadata.csv")
#load tibble library
library(tibble)
# change meta_novir rownames to column used for join (dep. metadata has sample-id)
meta_novir <- rownames_to_column(meta_novir)
#merge the meta_novir with the depression metadata
meta_joined <- left_join(meta_novir, depression_metadata, by = join_by(`rowname` == `sample-id`))
#save
save(meta_joined, file = "metadata_join.RData")
View(meta_joined)
try_meta_joined <- load("metadata_join.RData")
typeof(try_meta_joined)
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/metadata_join.RData")
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/metadata_join.RData")
#load the files from the other group, they are mpt_rare and final
load("~/1_uni_data/Yr4T1/MICB 475 - data sci/project 2/longmeta_phyloseq_unrare.RData")
View(mpt_final)
#load the files from the other group, they are mpt_rare and final
load("longmeta_phyloseq_unrare.RData")
View(mpt_final)
load("longmeta_phyloseq_rare.RData")
#load the files from the other group, they are mpt_rare and final
load("longmeta_phyloseq_unrare.RData")
load("longmeta_phyloseq_rare.RData")
source("C:/MICB475/PROJECT2/project 2/project 2/metadata_in_mpt_final.R")
View(mpt_final)
View(mpt_final)
View(metadata)
View(meta_joined)
View(depression_metadata)
#merge the meta_novir with the depression metadata
#specify the columns we want to join
depression_metadata_filtered = subset(depression_metadata, select = -c("bdi_ii", "host_height", "host_weight"))
#merge the meta_novir with the depression metadata
#specify the columns we want to join
?select
#merge the meta_novir with the depression metadata
#specify the columns we want to join
?subset
depression_metadata_filtered = subset(depression_metadata, select = -c(bdi_ii, host_height, host_weight))
depression_metadata_filtered = subset(depression_metadata, select = -bdi_ii, -host_height, -host_weight)
View(depression_metadata_filtered)
?bind_cols
?full_join
?ends_with
meta_joined_no_dup = subset(meta_joined, select = -ends_with(".x", ".y"))
meta_joined_no_dup = select(meta_joined, select = -ends_with(".x", ".y"))
meta_joined_no_dup = select(meta_joined, select = -ends_with(".x", ".y", ignore.case=TRUE))
View(meta_joined_no_dup)
meta_joined_no_dup = select(meta_joined, select=-ends_with(".x", ".y", ignore.case=TRUE))
View(meta_joined_no_dup)
meta_joined_no_dup = select(meta_joined, select=-ends_with(".x"))
View(meta_joined_no_dup)
meta_joined_no_dup = select(meta_joined, select=-ends_with(".x"), -ends_with(".y"))
View(meta_joined_no_dup)
nms <- str_replace(string = names(meta_joined)[endsWith(names(meta_joined),".x")],
pattern = ".x",
replacement="") #get list of all column names ending in .x and remove the .x
xn <- names(meta_joined)[endsWith(names(meta_joined),".x")]#get list of all column names ending in .x
nms <- str_replace(string = xn,
pattern = ".x",
replacement="") #get list of all column names ending in .x and remove the .x
?str_replace
nms <- str_replace(string = xn,
pattern = ".x",
replacement="")
nms <- str_replace_all(string = xn,
pattern = ".x",
replacement="")
library(tidyverse)
nms <- str_replace_all(string = xn,
pattern = ".x",
replacement="")
meta_dup_col = map_dfc(nms,
~ coalesce(meta_joined[[paste0(.,".x")]],
meta_joined[[paste0(.,".y")]]
)) %>% setNames(nms)
View(meta_dup_col)
meta_joined_final = full_join(meta_joined_no_dup, meta_dup_col)
meta_joined_final = bind_cols(meta_joined_no_dup, meta_dup_col)
View(meta_joined_final)
?subset
#select only the columns we are interested in so we have a smaller metadata table to work with
subset(meta_joined_final, subset = "rowname", "HIV_status_clean", "hcv", "diabetes", "ethnicity", "host_age", "race", "sex", "dep_cat", "Host_age", "diastolic_bp", "pulse_pressure", "pulse", "systolic_BP", "lymphocyte_percent", "mch", "mchc", "rdw", "hgb","glucose_serum", "Creatinine", "alt_sgpt", "ast_sgot")
#select only the columns we are interested in so we have a smaller metadata table to work with
meta_subset = subset(meta_joined_final, subset = c("rowname", "HIV_status_clean", "hcv", "diabetes", "ethnicity", "host_age", "race", "sex", "dep_cat", "Host_age", "diastolic_bp", "pulse_pressure", "pulse", "systolic_BP", "lymphocyte_percent", "mch", "mchc", "rdw", "hgb","glucose_serum", "Creatinine", "alt_sgpt", "ast_sgot"))
#select only the columns we are interested in so we have a smaller metadata table to work with
meta_subset = subset(meta_joined_final, select = c("rowname", "HIV_status_clean", "hcv", "diabetes", "ethnicity", "host_age", "race", "sex", "dep_cat", "Host_age", "diastolic_bp", "pulse_pressure", "pulse", "systolic_BP", "lymphocyte_percent", "mch", "mchc", "rdw", "hgb","glucose_serum", "Creatinine", "alt_sgpt", "ast_sgot"))
#select only the columns we are interested in so we have a smaller metadata table to work with
meta_subset = subset(meta_joined_final, select = "rowname", "HIV_status_clean", "hcv", "diabetes", "ethnicity", "host_age", "race", "sex", "dep_cat", "Host_age", "diastolic_bp", "pulse_pressure", "pulse", "systolic_BP", "lymphocyte_percent", "mch", "mchc", "rdw", "hgb","glucose_serum", "Creatinine", "alt_sgpt", "ast_sgot")
?select
#select only the columns we are interested in so we have a smaller metadata table to work with
meta_subset = subset(meta_joined_final, select = rowname, HIV_status_clean, hcv, diabetes, ethnicity, host_age, race, sex, dep_cat, Host_age, diastolic_bp, pulse_pressure, pulse, systolic_BP, lymphocyte_percent, mch, mchc, rdw, hgb,glucose_serum, Creatinine, alt_sgpt, ast_sgot)
#select only the columns we are interested in so we have a smaller metadata table to work with
meta_subset = subset(meta_joined_final, select = rowname, hiv_status_clean, hcv, diabetes, ethnicity, host_age, race, sex, dep_cat, Host_age, diastolic_bp, pulse_pressure, pulse, systolic_BP, lymphocyte_percent, mch, mchc, rdw, hgb,glucose_serum, Creatinine, alt_sgpt, ast_sgot)
#select only the columns we are interested in so we have a smaller metadata table to work with
meta_subset = subset(meta_joined_final, select = rowname, hiv_status_clean, hcv, diabetes, ethnicity, host_age, race, sex, dep_cat, Host_age, diastolic_bp, pulse_pressure, pulse, systolic_BP, lymphocyte_percent, mch, mchc, rdw, hgb,glucose_serum, Creatinine, alt_sgpt, ast_sgot)
#select only the columns we are interested in so we have a smaller metadata table to work with
meta_subset = select(meta_joined_final, select = rowname, hiv_status_clean, hcv, diabetes, ethnicity, host_age, race, sex, dep_cat, Host_age, diastolic_bp, pulse_pressure, pulse, systolic_BP, lymphocyte_percent, mch, mchc, rdw, hgb,glucose_serum, Creatinine, alt_sgpt, ast_sgot)
View(meta_subset)
#select only the columns we are interested in so we have a smaller metadata table to work with
meta_subset = select(meta_joined_final, sample_id = rowname, hiv_status_clean, hcv, ethnicity, host_age, race, sex, dep_cat, diastolic_bp, pulse_pressure, pulse, systolic_BP, diabetes, mch, mchc, rdw, hgb,glucose_serum, Creatinine, alt_sgpt, ast_sgot, lymphocyte_percent)
View(meta_subset)
View(meta_subset)
#select only the columns we are interested in so we have a smaller metadata table to work with
meta_subset = select(meta_joined_final, sample_id = rowname, hiv_status_clean, hcv, ethnicity, race, host_age, sex, dep_cat, diastolic_bp, pulse_pressure, pulse, systolic_BP, diabetes, mch, mchc, rdw, hgb,glucose_serum, Creatinine, alt_sgpt, ast_sgot, lymphocyte_percent)
View(meta_subset)
#create new column for hypertension yes/no
?mutate
for (i in 1:nrow(meta_subset)) {
if (systolic_BP >= 130) {
print("hypertension")
} else if (diastolic_bp > 80) {
print ("hypersention")
} else {
print ("Healthy")
}
}
for (i in 1:nrow(meta_subset)) {
if (meta_subset$systolic_BP >= 130) {
print("hypertension")
} else if (meta_subset$diastolic_bp > 80) {
print ("hypersention")
} else {
print ("Healthy")
}
}
?ifelse
#create new column for hypertension yes/no
#create empty column
meta_subset$hypertension = na
#create new column for hypertension yes/no
#create empty column
meta_subset$hypertension = NA
ifelse(meta_subset$systolic_BP >= 130, "yes", "no")
ifelse(meta_subset$systolic_BP >= 130, meta_subset$hypertention = "yes", meta_subset$hypertension = "no")
meta_subset$hypertension = ifelse(meta_subset$systolic_BP >= 130, "yes", "no")
meta_subset$hypertension = ifelse(meta_subset$diastolic_bp >80, "yes")
?aaply
?apply
meta_subset$hypertension = ifelse(meta_subset$diastolic_bp >80, "yes", meta_subset$hypertension)
?unite
unite(meta_subset, dep_and_hyp, dep_cat, hypertension, sep = "_", remove=FALSE, na.rm = FALSE)
meta_subset = unite(meta_subset, dep_and_hyp, dep_cat, hypertension, sep = "_", remove=FALSE, na.rm = FALSE)
#fill hypertension column with yes or no based only on systolic bp
meta_subset$hypertension = ifelse(meta_subset$systolic_BP >= 130, "hypertension", "no_hypertension")
#replace hypertension column value with yes if diastolic bp is high
meta_subset$hypertension = ifelse(meta_subset$diastolic_bp >80, "hypertension", meta_subset$hypertension)
meta_subset = unite(meta_subset, dep_and_hyp, dep_cat, hypertension, sep = "_", remove=FALSE, na.rm = FALSE)
?group_by
summarize(group_by(meta_subset, hypertension = "hypertension"))
sum(meta_subset$hypertension == "hypertension")
?sum
dim(meta_subset)
COlSums(meta_subset)
ColSums(meta_subset)
colSums(meta_subset)
sum(meta_subset$hypertension == "hypertension")
sum(meta_subset$hypertension == "hypertension")
print(sum(meta_subset$hypertension == "hypertension"))
sum(meta_subset$hypertension == "hypertension", na.rm=TRUE)
sum(meta_subset$hypertension == "no_hypertension", na.rm=TRUE)
sum(meta_subset$hypertension == "NA", na.rm=TRUE)
sum(meta_subset$hypertension == "NA")
sum(is.na(meta_subset$hypertension))
#count how many have depression and hypertension together
summarize(group_by(meta_subset$hypertension))
?group_by
table(meta_subset$hypertension)
?table
table(meta_subset$hypertension, useNA = TRUE)
table(meta_subset$hypertension, useNA = "always")
table(meta_subset$dep_and_hyp)
load("metadata_final.RData")
?read_delim
#load manifest file for depression dataset
dep_manifest <- read_delim("depression_manifest.tsv")
#library(BiocManager)
#library(phyloseq)
library(dplyr)
?read_delim
#load manifest file for depression dataset
dep_manifest <- read_delim("depression_manifest.tsv", delim = "\t")
#load manifest file for depression dataset
dep_manifest <- read.delim("depression_manifest.tsv", delim = "\t")
#load manifest file for depression dataset
dep_manifest <- read.delim("depression_manifest.tsv", delim = "/t")
#load manifest file for depression dataset
dep_manifest <- read.delim("depression_manifest.tsv", sep = "\t")
View(dep_manifest)
colnames(meta_final)
View(meta_final)
?full_join
#keep sample IDs in manifest (sample.id) that matches sample IDs in metadata (sample_id)
joined_manifest <- inner_join(dep_manifest, meta_final, by = join_by(dep_manifest$sample.id == meta_final$sample_id))
#keep sample IDs in manifest (sample.id) that matches sample IDs in metadata (sample_id)
joined_manifest <- inner_join(dep_manifest, meta_final, by = join_by(sample.id == sample_id))
View(joined_manifest)
#keep sample IDs in manifest (sample.id) that matches sample IDs in metadata (sample_id)
joined_manifest <- inner_join(dep_manifest, meta_final, by = join_by(sample.id == sample_id)) %>%
#keep only the sample.id and absolute.filepath columns
select(sample.id, absolute.filepath)
?save tsv
#save the new manifest file as RData if alterations are needed ...
save(joined_manifest, file = "joined_manifest.RData")
#... and as a tsv for qiime
write.table(joined_manifest, file="depression_joined_manifest.tsv", sep="\t", quote=FALSE, rownames=FALSE)
#... and as a tsv for qiime
write.table(joined_manifest, file="depression_joined_manifest.tsv", sep="\t", quote=FALSE)
?write.table
#... and as a tsv for qiime
write.table(joined_manifest, file="depression_joined_manifest.tsv", sep="\t", quote=FALSE, row.names = FALSE)
